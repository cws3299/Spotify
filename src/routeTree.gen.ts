/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as TestLayoutRouteImport } from './pages/_testLayout'
import { Route as IndexRouteImport } from './pages/index'
import { Route as TestjsonIndexRouteImport } from './pages/testjson/index'
import { Route as SearchIndexRouteImport } from './pages/search/index'
import { Route as PostsIndexRouteImport } from './pages/posts/index'
import { Route as PlaylistIndexRouteImport } from './pages/playlist/index'
import { Route as SearchKeywordIndexRouteImport } from './pages/search/$keyword/index'
import { Route as PostsPostIdIndexRouteImport } from './pages/posts/$postId/index'
import { Route as PlaylistIdIndexRouteImport } from './pages/playlist/$id/index'
import { Route as TestLayoutTestIndexRouteImport } from './pages/_testLayout/test/index'
import { Route as TestLayoutTestNewsIndexRouteImport } from './pages/_testLayout/test/news/index'

const TestLayoutRoute = TestLayoutRouteImport.update({
  id: '/_testLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TestjsonIndexRoute = TestjsonIndexRouteImport.update({
  id: '/testjson/',
  path: '/testjson/',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchIndexRoute = SearchIndexRouteImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistIndexRoute = PlaylistIndexRouteImport.update({
  id: '/playlist/',
  path: '/playlist/',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchKeywordIndexRoute = SearchKeywordIndexRouteImport.update({
  id: '/search/$keyword/',
  path: '/search/$keyword/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsPostIdIndexRoute = PostsPostIdIndexRouteImport.update({
  id: '/posts/$postId/',
  path: '/posts/$postId/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistIdIndexRoute = PlaylistIdIndexRouteImport.update({
  id: '/playlist/$id/',
  path: '/playlist/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const TestLayoutTestIndexRoute = TestLayoutTestIndexRouteImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => TestLayoutRoute,
} as any)
const TestLayoutTestNewsIndexRoute = TestLayoutTestNewsIndexRouteImport.update({
  id: '/test/news/',
  path: '/test/news/',
  getParentRoute: () => TestLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/playlist': typeof PlaylistIndexRoute
  '/posts': typeof PostsIndexRoute
  '/search': typeof SearchIndexRoute
  '/testjson': typeof TestjsonIndexRoute
  '/test': typeof TestLayoutTestIndexRoute
  '/playlist/$id': typeof PlaylistIdIndexRoute
  '/posts/$postId': typeof PostsPostIdIndexRoute
  '/search/$keyword': typeof SearchKeywordIndexRoute
  '/test/news': typeof TestLayoutTestNewsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/playlist': typeof PlaylistIndexRoute
  '/posts': typeof PostsIndexRoute
  '/search': typeof SearchIndexRoute
  '/testjson': typeof TestjsonIndexRoute
  '/test': typeof TestLayoutTestIndexRoute
  '/playlist/$id': typeof PlaylistIdIndexRoute
  '/posts/$postId': typeof PostsPostIdIndexRoute
  '/search/$keyword': typeof SearchKeywordIndexRoute
  '/test/news': typeof TestLayoutTestNewsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_testLayout': typeof TestLayoutRouteWithChildren
  '/playlist/': typeof PlaylistIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/search/': typeof SearchIndexRoute
  '/testjson/': typeof TestjsonIndexRoute
  '/_testLayout/test/': typeof TestLayoutTestIndexRoute
  '/playlist/$id/': typeof PlaylistIdIndexRoute
  '/posts/$postId/': typeof PostsPostIdIndexRoute
  '/search/$keyword/': typeof SearchKeywordIndexRoute
  '/_testLayout/test/news/': typeof TestLayoutTestNewsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/playlist'
    | '/posts'
    | '/search'
    | '/testjson'
    | '/test'
    | '/playlist/$id'
    | '/posts/$postId'
    | '/search/$keyword'
    | '/test/news'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/playlist'
    | '/posts'
    | '/search'
    | '/testjson'
    | '/test'
    | '/playlist/$id'
    | '/posts/$postId'
    | '/search/$keyword'
    | '/test/news'
  id:
    | '__root__'
    | '/'
    | '/_testLayout'
    | '/playlist/'
    | '/posts/'
    | '/search/'
    | '/testjson/'
    | '/_testLayout/test/'
    | '/playlist/$id/'
    | '/posts/$postId/'
    | '/search/$keyword/'
    | '/_testLayout/test/news/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TestLayoutRoute: typeof TestLayoutRouteWithChildren
  PlaylistIndexRoute: typeof PlaylistIndexRoute
  PostsIndexRoute: typeof PostsIndexRoute
  SearchIndexRoute: typeof SearchIndexRoute
  TestjsonIndexRoute: typeof TestjsonIndexRoute
  PlaylistIdIndexRoute: typeof PlaylistIdIndexRoute
  PostsPostIdIndexRoute: typeof PostsPostIdIndexRoute
  SearchKeywordIndexRoute: typeof SearchKeywordIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_testLayout': {
      id: '/_testLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof TestLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/testjson/': {
      id: '/testjson/'
      path: '/testjson'
      fullPath: '/testjson'
      preLoaderRoute: typeof TestjsonIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlist/': {
      id: '/playlist/'
      path: '/playlist'
      fullPath: '/playlist'
      preLoaderRoute: typeof PlaylistIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search/$keyword/': {
      id: '/search/$keyword/'
      path: '/search/$keyword'
      fullPath: '/search/$keyword'
      preLoaderRoute: typeof SearchKeywordIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/$postId/': {
      id: '/posts/$postId/'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlist/$id/': {
      id: '/playlist/$id/'
      path: '/playlist/$id'
      fullPath: '/playlist/$id'
      preLoaderRoute: typeof PlaylistIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_testLayout/test/': {
      id: '/_testLayout/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestLayoutTestIndexRouteImport
      parentRoute: typeof TestLayoutRoute
    }
    '/_testLayout/test/news/': {
      id: '/_testLayout/test/news/'
      path: '/test/news'
      fullPath: '/test/news'
      preLoaderRoute: typeof TestLayoutTestNewsIndexRouteImport
      parentRoute: typeof TestLayoutRoute
    }
  }
}

interface TestLayoutRouteChildren {
  TestLayoutTestIndexRoute: typeof TestLayoutTestIndexRoute
  TestLayoutTestNewsIndexRoute: typeof TestLayoutTestNewsIndexRoute
}

const TestLayoutRouteChildren: TestLayoutRouteChildren = {
  TestLayoutTestIndexRoute: TestLayoutTestIndexRoute,
  TestLayoutTestNewsIndexRoute: TestLayoutTestNewsIndexRoute,
}

const TestLayoutRouteWithChildren = TestLayoutRoute._addFileChildren(
  TestLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TestLayoutRoute: TestLayoutRouteWithChildren,
  PlaylistIndexRoute: PlaylistIndexRoute,
  PostsIndexRoute: PostsIndexRoute,
  SearchIndexRoute: SearchIndexRoute,
  TestjsonIndexRoute: TestjsonIndexRoute,
  PlaylistIdIndexRoute: PlaylistIdIndexRoute,
  PostsPostIdIndexRoute: PostsPostIdIndexRoute,
  SearchKeywordIndexRoute: SearchKeywordIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
